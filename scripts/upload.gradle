apply plugin: 'maven-publish'

Properties properties = new Properties()
properties.load(new FileInputStream("${projectDir}/pom.properties"))
properties.load(project.rootProject.file('version.properties').newDataInputStream())

if (new File("local.properties").exists()) {
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
}

def user = System.getenv("BINTARY_USER")
def apiKey = System.getenv("BINTARY_APIKEY")
def repo = System.getenv("BINTARY_REPO")

if (user == null || user.length() == 0) {
    user = properties.user
}

if (apiKey == null || apiKey.length() == 0) {
    apiKey = properties.apiKey
}

if (repo == null || repo.length() == 0) {
    repo = properties.releasesRepository
}

def libVersion = properties.version

task generateSourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier = "sources"
}

publishing {     // 配置maven 仓库
    repositories {
        mavenLocal()
        // 发布到默认的 本地maven 仓库 ，路径： USER_HOME/.m2/repository/

        maven {
            url = NEXUS_URL
            url = libVersion.endsWith('SNAPSHOT') ? NEXUS_URL_SNAPSHOT : NEXUS_URL
            credentials {
                username = NEXUS_USERNAME
                password = NEXUS_PASSWORD
            }
        }
    }
    // 配置发布产物
    publications { PublicationContainer publication ->
        // 名称可以随便定义，这里定义成 maven，是因为我的 aar 包是发布到 maven 仓库的，所以这里为了见名知义，定义成了 maven
        // 任务名称：maven
        maven(MavenPublication) {
            // 容器可配置的信息 MavenPublication
            // 依赖 bundleReleaseAar 任务，并上传其产出的aar
            afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) }
            // 方式一：生成aar包
            // artifact "$buildDir/outputs/aar/${project.name}-release.aar"
            // 方式二：指定生成的aar路径
//            groupId = "com.mico.libx.android"
//            artifactId = "libx-imagedecoder"
//            version = "1.0.1-SNAPSHOT"

            groupId = properties.groupId
            artifactId = properties.artifactId
            version = libVersion

            // 上传source，这样使用方可以看到方法注释
            artifact generateSourcesJar

            pom {
                developers {
                    developer {
                        name = POM_DEVELOPER_NAME
                    }
                }
            }

            pom.withXml {
                def dependenciesNode = asNode().appendNode("dependencies")
                configurations.implementation.allDependencies.forEach() {
                    Dependency dependency ->
                        if (dependency.version != "unspecified" && dependency.name != "unspecified") {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', dependency.group)
                            dependencyNode.appendNode('artifactId', dependency.name)
                            dependencyNode.appendNode('version', dependency.version)
                        }
                }
            }
        }
    }
}

tasks.register('uploadAar') {
    dependsOn clean, publish
}

// 打包时上传源码，可选
tasks.register('androidSourcesJar', Jar) {
    archiveClassifier = "sources"
    from android.sourceSets.main.java.sourceFiles
}

artifacts {
    archives androidSourcesJar
}
